#include <xc.h>
#include <stdio.h>
#include <stdlib.h>
#include "pic18f4550.h"


#define RS 	  	PORTCbits.RC0
#define RW 		PORTCbits.RC1
#define EN		PORTCbits.RC2

#define row1port LATBbits.LATB0
#define row2port LATBbits.LATB1
#define row3port LATBbits.LATB2
#define row4port LATBbits.LATB3
#define col1port PORTBbits.RB4
#define col2port PORTBbits.RB5
#define col3port PORTBbits.RB6
/*

#define K_R1 LATBbits.LATB0
#define K_R2 LATBbits.LATB1
#define K_R3 LATBbits.LATB2
#define K_R4 LATBbits.LATB3
#define K_C1 PORTBbits.RB4
#define K_C2 PORTBbits.RB5
#define K_C3 PORTBbits.RB6

//#define col4port PORTBbits.RB7   //if a 4x4 keypad is used

//#define col4port PORTBbits.RB7   //if a 4x4 keypad is used
*/

#define DATA	PORTD

char const keyPadMatrix[] =
{
    '1','2','3',
    '4','5','6',
    '7','8','9',
    '*','0','#',
    0xFF
};

int N_Chars = 32;
void Get_Score (int socre);
unsigned char Show_Card (int index);
void Compare_Cards (int index1 , int intedx2);

int kbd_getc();
void Welcome_Screen ();
void Quit_Screen ();
void Start_Screen ();
//unsigned char KeyPad_Read (void);
//unsigned char KeyPad_Wait (void);
void LCD_WRITE(unsigned char letter, unsigned int location);
void LCD_INIT(void);
void LCD_CMD(unsigned int value);
void LCD_DAT(unsigned int value);
void delay();
void Intit_Game();
void Fill_LCD ();
void Minidelay(void);
/*
 * 
 */
unsigned int lcd_position = 0;
unsigned int lcd_direction = 0;
char key,old_key;


int main(int argc, char** argv) {
   
    ADCON0 = 0x00;//Disable ADC ports
    ADCON1 = 0x06;//Disable ADC ports   
    PORTB   = 0x00;
    LATB    = 0x00;
    TRISB   = 0xF0;            //Use PORTB for Keypad
   
    INTCON2bits.NOT_RBPU = 1;  // Pull-ups disabled
    TRISD =0x00;
    TRISC =0x00;
 int newgame = 0; 
 
   LCD_CMD (0x38);    
   LCD_CMD (0x0d);
  if (newgame == 0)
  { 
   
     Welcome_Screen ();
      newgame = 1;
  }
   LCD_CMD (0x38);    
int cur = 0x80;
LCD_CMD(cur);
int r = 1;
int score = 0;
int card1 = 0;
int card2 = 0;
int flag = 0;

   char keypress = '0' ;
   char keyboard='+';
while(1)
   {
      keypress = kbd_getc();
 	 if(keypress!=0xFF)
      {
        keyboard=keypress;
     }
     
  if (keyboard == '*' )
     {
	
        Start_Screen ();
	Intit_Game();
	Fill_LCD();
	LCD_CMD (0x80);
	LCD_CMD (0x0d); 
	keyboard = '+';	   
     }  
     
     
   else  if (keyboard == '#')
     {
	    LCD_CMD (0x01);
	    score = 32 - N_Chars;
	Get_Score (score);
	 delay ();
      keyboard = '+';
      }     

          
    else if (keyboard == '5')
     {
      unsigned card = Show_Card (cur);
      flag++;
      LCD_DAT (card);
      LCD_CMD (cur);
      
	
   if (flag == 1)
      {
	 card1 = cur;
	 //LCD_WRITE ('Q' , 15);

      }  
   else if (flag ==2)
      {
	 card2 = cur;
	 //LCD_WRITE ('N' , 15);
	 flag =0;
      Compare_Cards (card1 , card2);
      }
    LCD_CMD (cur);
      keyboard= '+';    
     }   
 
    else if (keyboard == '6')
 {
   LCD_CMD (cur);
   cur= cur- 1;
   if (cur < 0x80 )
   {
      cur = 0xCF;
      LCD_CMD(cur);
      r = 2;
    } 
    else if (cur < 0xC0 && cur > 0x8F )
   {
      cur = 0x8F;
      LCD_CMD(cur);
      r = 1;
    }
   else
   {
      LCD_CMD(cur);
    }    
    keyboard = '+';
 }
   

   else if (keyboard == '4')
   {
   LCD_CMD (cur);
   cur= cur + 1;
   if (cur > 0x8F && cur <0xC0 )
   {
      cur = 0xC0;
      LCD_CMD(cur);
      r = 2;
    } 
    else if (cur > 0xCF )
   {
      cur = 0x80;
      LCD_CMD(cur);
      r = 1;
    }
   else
   {
      LCD_CMD(cur);
    }    
    keyboard = '+';   
      }    
  
 else if (keyboard == '2')
   {	
     if ( r == 2)
     {	
   if (cur >= 0xC0  && cur <= 0xCF)
   {
      cur = cur - 64;
      LCD_CMD (cur);
      keyboard = '+';
      r = 1;
   }
      }
       
   }
   
   else if (keyboard == '8')
   {
     if ( r == 1)
     {	
   if (cur >= 0x80  && cur <= 0x8F)
   {
      cur = cur + 64;
      LCD_CMD (cur);
      keyboard = '+';
      r = 2;
   }
      }
  
   }

    

   // End While
      // return (EXIT_SUCCESS);
     }
}


void LCD_CMD(unsigned int value)
{   
    RS=0;
    RW=0;
    EN=1;
    DATA =value;
    delay ();
    EN=0;
    delay ();
 }

void LCD_DAT(unsigned int value)
{
    DATA=value;
    RS=1;
    RW=0;
    EN=1;    
    delay ();
    EN=0;
    delay();

}

void lcd_data_string(unsigned char *str) // Function to send data to string
{
    int i=0;
    while(str[i]!='\0')
    {
      LCD_DAT(str[i]);
      i++;
      //delay(10);
    }
    return;
}

void lcd(unsigned char str[10])
{
    LCD_CMD(0x38);
    LCD_CMD(0x0e);
    lcd_data_string(str);
}

void LCD_WRITE(unsigned char letter, unsigned int location){


//Move Cursor To Location
		//If Location is larger than 15, ignore
	if(location < 16)
	{
	//Set Cursor Position
		DATA = location ^ 0b10000000;
								   //10000
		RS = 0;
		RW = 0;
		EN = 1;
		delay();
		EN = 0;


	//Print Letter
		DATA = letter;
		RS = 1;
		RW = 0;
		EN = 1;
		delay();
		EN = 0;
	}
	else if(location > 15 && location < 32)
	{
	//Set Cursor Position
		DATA = (location-16) ^ 0b11000000;
		//10000
		RS = 0;
		RW = 0;
		EN = 1;
		delay();
		EN = 0;


	//Print Letter
		DATA = letter;
		RS = 1;
		RW = 0;
		EN = 1;
		delay();
		EN = 0;
	}
	else
	{
	//Print Letter
		DATA = letter;
		RS = 1;
		RW = 0;
		EN = 1;
		delay();
		EN = 0;
	}
}

void LCD_INIT(void){

//Clear Display
DATA = 0b00000001;
RS = 0;
RW = 0;
EN = 1;
delay();
EN = 0;

//Return Home
DATA = 0b00000010;
RS = 0;
RW = 0;
EN = 1;
delay();
EN = 0;

delay();

//Function Set
DATA = 0b00111000;
RS = 0;
RW = 0;
EN = 1;
delay();
EN = 0;

//Display On, Cursor Off, No Blinking Cursor
DATA = 0b00001100;
RS = 0;
RW = 0;
EN = 1;
delay();
EN = 0;

//Entry Mode Set
DATA = 0b00000110;
RS = 0;
RW = 0;
EN = 1;
delay();
EN = 0;

}


void delay(void)
{
    int counter = 0;
    for (counter = 0; counter<10000; counter++) {
        ;
    }
}
void Intit_Game()
{


const unsigned short Chars[] = {
  0b00000,0b01010,0b01010,0b01010,0b00000,0b10001,0b01110,0b00000, // Code for CGRAM memory space 1
  0b00000,0b00000,0b00001,0b00011,0b00111,0b01111,0b11111,0b00000, // Code for CGRAM memory space 2
  0b00000,0b00100,0b01010,0b10001,0b01010,0b11011,0b00000,0b00000, // Code for CGRAM memory space 3
  0b11000,0b11000,0b11111,0b11111,0b00011,0b00011,0b00011,0b00011, // Code for CGRAM memory space 4
  0b00000,0b01110,0b01110,0b01110,0b00000,0b01110,0b01010,0b01110, // Code for CGRAM memory space 5
  0b00000,0b01100,0b10010,0b10010,0b01100,0b00101,0b00010,0b00101, // Code for CGRAM memory space 6
  0b00000,0b00100,0b00110,0b00101,0b11100,0b11100,0b11100,0b00000, // Code for CGRAM memory space 7
  0b10100,0b01010,0b01101,0b01010,0b11001,0b11001,0b00011,0b00011 // Code for CGRAM memory space 8
};

unsigned int i=0;
unsigned int cgram_loc = 0;
	  
	  for(i=0;i<64;i++)
	    {
			cgram_loc = 0b01000000 + i;
			LCD_CMD(cgram_loc);
			LCD_WRITE(Chars[i],99);
			delay();

	   }
	 
}




void Fill_LCD ()
{
 LCD_CMD (0x38);
int cur;   
   for (cur = 0x80; cur <= 0x8F; cur++)
{     
      
      LCD_CMD (cur);
      LCD_DAT ('?');  
   }

for (cur = 0xC0; cur <= 0xCF; cur++)
{     
      
      LCD_CMD (cur);
      LCD_DAT ('?');  
   }
 LCD_CMD (0x80);  
}


void Minidelay(void)
{
    int counter = 0;
    for (counter = 0; counter<300; counter++) {
        ;
    }
}
int kbd_getc()
{
    // This routine returns the first key found to be pressed during the scan.
    char key = 0, row;

    for( row = 0b00000001; row < 0b00010000; row <<= 1 )
    {
        {   // turn on row output
            row1port = (row & 0x0001)>>0;
            row2port = (row & 0x0002)>>1;
            row3port = (row & 0x0004)>>2;
            row4port = (row & 0x0008)>>3;
	    Minidelay();
        }
        // read colums - break when key press detected
        if( col1port )break;  key++;
        if( col2port )break;  key++;
        if( col3port )break;  key++;
        //if( col4port )break;  key++;
     }
    row1port = 0;
    row2port = 0;
    row3port = 0;
    row4port = 0;
    if (key!=old_key){
      old_key=key;
      return keyPadMatrix[ key ];
    }
    else
    return keyPadMatrix[ 0x0C ];
}

void Welcome_Screen ()
{
   LCD_WRITE ('W' , 2);
   LCD_WRITE ('E' , 3);
   LCD_WRITE ('L' , 4);
   LCD_WRITE ('C' , 5);
   LCD_WRITE ('O' , 6);
   LCD_WRITE ('M' , 7);
   LCD_WRITE ('E' , 8);
   LCD_WRITE (' ' , 9);
   LCD_WRITE (' ' , 10);
   LCD_WRITE (' ' , 11);
   LCD_WRITE ('T' , 12);
   LCD_WRITE ('O' , 13);
   
   LCD_WRITE ('P' , 16);
   LCD_WRITE ('E' , 17);
   LCD_WRITE ('X' , 18);
   LCD_WRITE ('E' , 19);
   LCD_WRITE ('S' , 20);
   LCD_WRITE ('O' , 21);
   LCD_WRITE (' ' , 22);
   LCD_WRITE ('G' , 23);
   LCD_WRITE ('A' , 24);
   LCD_WRITE ('M' , 25);
   LCD_WRITE ('E' , 26);
   LCD_WRITE ('>' , 27);
   LCD_WRITE ('H' , 28);   
   LCD_WRITE ('M' , 29);
   LCD_WRITE ('W' , 30);
   LCD_WRITE ('Z' , 31);   
 }
 
 
 void Start_Screen ()
 {
 LCD_CMD (0x01);
   LCD_WRITE ('S' , 0);
   delay ();
   LCD_WRITE ('T' , 1);
  delay ();
  LCD_WRITE ('A' , 2);
  delay ();
  LCD_WRITE ('R' , 3);
  LCD_WRITE ('T' , 4);
  delay ();
  LCD_WRITE ('I' , 5);
  delay (); 
  LCD_WRITE ('N' , 6);
  delay ();
  LCD_WRITE ('G' , 7);
  delay ();
  LCD_WRITE ('.' , 8);
  delay ();
  LCD_WRITE ('.' , 9);
  delay ();
  LCD_WRITE ('.' , 10);
   delay ();
   delay ();
   delay ();
   delay ();
   
    LCD_CMD (0x01);
 }
    
 unsigned char Show_Card (int index)
 {
   if (index == 0x80 || index ==  0xCB)
	 return 0;    
   
   if (index == 0x8A || index ==  0xC4)
	 return 1;    
   
   if (index == 0x8C || index ==  0xC0)
	 return 2;       

      if (index == 0x85 || index ==  0x83)
	 return 3;
      
    if (index == 0x88 || index ==  0xC8)
	 return 4;    
    
       if (index == 0x8F || index ==  0xC1)
	 return 5;
       
        if (index == 0x86 || index ==  0xC2)
	 return 6;    
	
	 if (index == 0x82 || index ==  0xC7)
	 return 7;
	 
	 if (index == 0x81 || index ==  0xC5)
	 return '!';
	 
	 if (index == 0x84 || index ==  0x88)
	 return '~';
	 
	 if (index == 0xC9 || index ==  0xCF)
	 return '$';	
	 
	 if (index == 0xCE || index ==  0xC6)
	 return '%';
	 
	 if (index == 0x89 || index ==  0xC3)
	 return '&';
	 
	 if (index == 0x8B || index ==  0xCA)
	 return 'X';
	 
	 if (index == 0x8E || index ==  0xCC)
	 return '@';
	 
	 if (index == 0x8D || index ==  0xCD)
	 return '#';
		     
  }
  
 void Compare_Cards (int index1 , int index2)
  {
      unsigned char tmp1 = Show_Card(index1);
      unsigned char tmp2 = Show_Card (index2);
     
     if (tmp1 == tmp2)
     {
	LCD_CMD (index1);
	 LCD_DAT(' ');
	LCD_CMD (index2);
	 LCD_DAT(' ');
	 LCD_CMD (index2);
	N_Chars  = N_Chars - 2;
      
     }
      else
      {
      
	 LCD_CMD (index1);
	 LCD_DAT('?');
	LCD_CMD (index2);
	 LCD_DAT('?');
	 LCD_CMD (index2);

	 }
	
  }
  
 void Get_Score (int socre)
  {

     LCD_WRITE ( 'Y' , 5);
     LCD_WRITE ( 'O' , 6);
     LCD_WRITE ( 'U' , 7);
     LCD_WRITE ( 'R' , 8); 

     LCD_WRITE ( 'S' , 21);
     LCD_WRITE ( 'C' , 22);
     LCD_WRITE ( 'O' , 23);
     LCD_WRITE ( 'R' , 24);
     LCD_WRITE ( 'E' , 25);
  
     LCD_WRITE ( ' ' , 26);
     LCD_WRITE ( ':' , 27);
     LCD_WRITE ( ' ' , 28);
  
  socre = socre/2;
     
     if (socre == 0)
    {
      LCD_WRITE ( '0' , 29);
    }
     if (socre == 1)
    {
      LCD_WRITE ( '1' , 29);
    }
      if (socre == 2)
    {
      LCD_WRITE ( '2' , 29);
    }
     if (socre == 3)
    {
      LCD_WRITE ( '3' , 29);
    }   
    if (socre == 4)
    {
      LCD_WRITE ( '4' , 29);
    }
     if (socre == 5)
    {
      LCD_WRITE ( '5' , 29);
    }   
    
    if (socre == 6)
    {
      LCD_WRITE ( '6' , 29);
    }
     if (socre == 7)
    {
      LCD_WRITE ( '7' , 29);
    }   
    if (socre == 8)
    {
      LCD_WRITE ( '8' , 29);
    }
    
     if (socre == 9)
    {
      LCD_WRITE ( '9' , 29);
    } 
    if (socre == 10)
    {
      LCD_WRITE ( '1' , 29);
      LCD_WRITE ( '0' , 30);
    }
   if (socre == 10)
    {
      LCD_WRITE ( '1' , 29);
      LCD_WRITE ( '0' , 30);
    }
      if (socre == 10)
    {
      LCD_WRITE ( '1' , 29);
      LCD_WRITE ( '0' , 30);
    }
      if (socre == 10)
    {
      LCD_WRITE ( '1' , 29);
      LCD_WRITE ( '0' , 30);
    }
      if (socre == 10)
    {
      LCD_WRITE ( '1' , 29);
      LCD_WRITE ( '0' , 30);
    }
      if (socre == 11)
    {
      LCD_WRITE ( '1' , 29);
      LCD_WRITE ( '1' , 30);
    }
      if (socre == 12)
    {
      LCD_WRITE ( '1' , 29);
      LCD_WRITE ( '2' , 30);
    }
      if (socre == 13)
    {
      LCD_WRITE ( '1' , 29);
      LCD_WRITE ( '3' , 30);
    }
      if (socre == 14)
    {
      LCD_WRITE ( '1' , 29);
      LCD_WRITE ( '4' , 30);
    }
      if (socre == 15)
    {
      LCD_WRITE ( '1' , 29);
      LCD_WRITE ( '5' , 30);
    }
      if (socre == 16)
    {
      LCD_WRITE ( '1' , 29);
      LCD_WRITE ( '6' , 30);
    }
  
    delay ();
    }
		 